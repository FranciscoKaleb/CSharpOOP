using CSharpOOP.Characters.Melee;
using CSharpOOP.Enumerations;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CSharpOOP.Characters
{
    public class Character
    {
        private const int STARTING_ABILITY_POINTS = 10;
        private const int STARTING_HEALTH_POINTS = 500;
        private const int STARTING_LEVEL = 1;
        private const string DEFAULT_NAME = "Player";   
        private const int DEFAULT_AGE = 18;             
        private const int DEFAULT_HEIGHT = 170;         
        private const int DEFAULT_WEIGHT = 60;          
        private const Faction DEFAULT_FACTION = Faction.Neutral;
        private const int CHAOS_HEALTH_BONUS = 500;
        private const int EVIL_HEALTH_BONUS = 300;
        private const int RIGHTEOUS_HEALTH_BONUS = 400;
        private const int NEUTRAL_HEALTH_BONUS = 100;


        private static int idCounter;
        private int id;
        private int abilityPoints;
        private int healthPoints;
        private int level;
        private int age;
        private int height;
        private int weight;
        private string name;
        private Faction faction;
        private int experiencePoints;
        private int provideExperiencePoints;
        private int factionBonusHealth;


        public static int IdCounter
        {
            get
            {
                return Warrior.idCounter;
            }
            set
            {
                Warrior.idCounter = value;
            }
        }
        public int Id
        {
            get
            {
                return this.id;
            }
            set
            {
                this.id = value;
            }
        }                    //autogenerated
        public int HealthPoints
        {
            get
            {
                return this.healthPoints;
            }
            set
            {

                if (value >= 0)
                {
                    this.healthPoints = value;
                }
                else
                {
                    throw new ArgumentOutOfRangeException(string.Empty, "Health Points cannot be negative");
                }
            }
        }               //default
        public int AbilityPoints
        {
            get
            {
                return this.abilityPoints;
            }
            set
            {
                if (value >= 0)
                {
                    this.abilityPoints = value;
                }
                else
                {
                    throw new ArgumentOutOfRangeException(string.Empty, "Ability Points cannot be negative");
                }

            }
        }              //default
        public int Level
        {
            get
            {
                return this.level;
            }
            set
            {
                if (value >= 0)
                {
                    this.level = value;
                }
                else
                {
                    throw new ArgumentOutOfRangeException(string.Empty, "level cannot be negative");
                }
            }
        }                      //default
        public int Age
        {
            get
            {
                return this.age;
            }
            set
            {
                this.age = value;
            }
        }                           // user defined
        public int Height
        {
            get
            {
                return this.height;
            }
            set
            {
                this.height = value;
            }
        }                        // user defined
        public int Weight
        {
            get
            {
                return this.weight;
            }
            set
            {
                this.weight = value;
            }
        }                        // user defined
        public string Name
        {
            get
            {
                return this.name;
            }
            set
            {
                if (value.Length < 20)
                {
                    this.name = value;
                }
                else
                {
                    throw new ArgumentOutOfRangeException(String.Empty, "name must only contain max of 20 characters");
                    // Console.WriteLine("name must only contain max of 20 characters");
                }

            }
        }                       // user defined
        public Faction Faction
        {
            get
            {
                return this.faction;
            }
            set
            {
                this.faction = value;
            }
        }                   // user defined
        public int ExperiencePoints
        {
            get
            {
                return experiencePoints;
            }
            set
            {
                experiencePoints = value;
            }
        }           //default
        public int ProvidedExperiencePoints
        {
            get
            {
                return provideExperiencePoints;
            }
            set
            {
                provideExperiencePoints = value;
            }
        }   //default
        public int FactionBonusHealth
        {
            get
            {
                return factionBonusHealth;
            }

        }


        public Character()
            :this("Player")
        {

        }
        public Character(string name)
            :this(name, DEFAULT_AGE, DEFAULT_HEIGHT,DEFAULT_WEIGHT,DEFAULT_FACTION)
        {

        }
        public Character(string name, int age, int height, int weight, Faction faction)
        {
            Name = name;
            Age = age;
            Height = height;
            Weight = weight;
            Faction = faction;
            AbilityPoints = STARTING_ABILITY_POINTS;
            HealthPoints = STARTING_HEALTH_POINTS;
            addFactionBonus();
            Level = STARTING_LEVEL;        
        }

        public void addFactionBonus()
        {
            if (Faction == Faction.Neutral)
            {
                factionBonusHealth = NEUTRAL_HEALTH_BONUS;
            }
            if (Faction == Faction.Chaos)
            {
                factionBonusHealth = CHAOS_HEALTH_BONUS;
            }
            if (Faction == Faction.Evil)
            {
                factionBonusHealth = EVIL_HEALTH_BONUS;
            }
            if (Faction == Faction.Righteous)
            {
                factionBonusHealth = RIGHTEOUS_HEALTH_BONUS;
            }
        }

    }
}
