
using CSharpOOP.Enumerations;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CSharpOOP.Units.Zold
{
    public class Unit
    {
        private const int STARTING_ABILITY_POINTS = 10;
        private const int STARTING_HEALTH_POINTS = 500;
        private const int STARTING_LEVEL = 1;
        private const string DEFAULT_NAME = "Player";
        private const int DEFAULT_AGE = 18;
        private const int DEFAULT_HEIGHT = 170;
        private const int DEFAULT_WEIGHT = 60;
        private const Faction DEFAULT_FACTION = Faction.Neutral;
        private const int CHAOS_HEALTH_BONUS = 500;
        private const int EVIL_HEALTH_BONUS = 300;
        private const int RIGHTEOUS_HEALTH_BONUS = 400;
        private const int NEUTRAL_HEALTH_BONUS = 100;


        private static int idCounter;   //unit
        private int id;                 //unit
        private string name;            //unit
        private Faction faction;        //unit
        private int age;                //hero
        private int height;             //unit
        private int weight;             //unit

        private int provideExperiencePoints; //unit

        private int abilityPoints;      //hero     
        private int experiencePoints;   //hero
        private int level;              //hero

        private int factionBonusHealth; //unit
        private int healthPoints;       //unit
        private int attackDamage;       //unit
        private int armorPoints;        //unit
        private int moveSpeed;          //unit


        public static int IdCounter
        {
            get
            {
                return idCounter;
            }
            set
            {
                idCounter = value;
            }
        }      //autogenerated
        public int Id
        {
            get
            {
                return id;
            }
            set
            {
                id = value;
            }
        }                    //autogenerated
        public int HealthPoints
        {
            get
            {
                return healthPoints;
            }
            set
            {

                if (value >= 0)
                {
                    healthPoints = value;
                }
                else
                {
                    throw new ArgumentOutOfRangeException(string.Empty, "Health Points cannot be negative");
                }
            }
        }               //default
        public int AbilityPoints
        {
            get
            {
                return abilityPoints;
            }
            set
            {
                if (value >= 0)
                {
                    abilityPoints = value;
                }
                else
                {
                    throw new ArgumentOutOfRangeException(string.Empty, "Ability Points cannot be negative");
                }

            }
        }              //default
        public int Level
        {
            get
            {
                return level;
            }
            set
            {
                if (value >= 0)
                {
                    level = value;
                }
                else
                {
                    throw new ArgumentOutOfRangeException(string.Empty, "level cannot be negative");
                }
            }
        }                      //default
        public virtual int Age
        {
            get
            {
                return age;
            }
            set
            {
                if (value >= 18)
                {
                    age = value;
                }
                else
                {
                    throw new ArgumentOutOfRangeException(string.Empty, "must be 18 or above");
                }

            }
        }                           // user defined
        public int Height
        {
            get
            {
                return height;
            }
            set
            {
                height = value;
            }
        }                        // user defined
        public int Weight
        {
            get
            {
                return weight;
            }
            set
            {
                weight = value;
            }
        }                        // user defined
        public string Name
        {
            get
            {
                return name;
            }
            set
            {
                if (value.Length < 20)
                {
                    name = value;
                }
                else
                {
                    throw new ArgumentOutOfRangeException(string.Empty, "name must only contain max of 20 characters");
                    // Console.WriteLine("name must only contain max of 20 characters");
                }

            }
        }                       // user defined
        public Faction Faction
        {
            get
            {
                return faction;
            }
            set
            {
                faction = value;
            }
        }                   // user defined
        public int ExperiencePoints
        {
            get
            {
                return experiencePoints;
            }
            set
            {
                experiencePoints = value;
            }
        }           //default
        public int ProvidedExperiencePoints
        {
            get
            {
                return provideExperiencePoints;
            }
            set
            {
                provideExperiencePoints = value;
            }
        }   //default
        public int FactionBonusHealth
        {
            get
            {
                return factionBonusHealth;
            }

        }         //default


        public Unit()
            : this("Player")
        {

        }
        public Unit(string name)
            : this(name, DEFAULT_AGE, DEFAULT_HEIGHT, DEFAULT_WEIGHT, DEFAULT_FACTION)
        {

        }
        public Unit(string name, int age, int height, int weight, Faction faction)
        {
            IdCounter++;
            Id = IdCounter;
            Name = name;
            Age = age;
            Height = height;
            Weight = weight;
            Faction = faction;
            AbilityPoints = STARTING_ABILITY_POINTS;
            HealthPoints = STARTING_HEALTH_POINTS;
            addFactionBonus();
            Level = STARTING_LEVEL;
        }

        public void addFactionBonus()
        {
            if (Faction == Faction.Neutral)
            {
                factionBonusHealth = NEUTRAL_HEALTH_BONUS;
            }
            if (Faction == Faction.Chaos)
            {
                factionBonusHealth = CHAOS_HEALTH_BONUS;
            }
            if (Faction == Faction.Evil)
            {
                factionBonusHealth = EVIL_HEALTH_BONUS;
            }
            if (Faction == Faction.Righteous)
            {
                factionBonusHealth = RIGHTEOUS_HEALTH_BONUS;
            }
        }

        public virtual void Move(int pauseBetweenMove)
        {
            for (int i = 0; i < 10; i++)
            {
                Thread.Sleep(pauseBetweenMove);
                Console.WriteLine($"I am {Name}, moving forward!\n");
            }
        }
        public virtual void Stop()
        {

        }
        public virtual void Attack()
        {

        }
        public virtual void Death()
        {

        }

    }
}
